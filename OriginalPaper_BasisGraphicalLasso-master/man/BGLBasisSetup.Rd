% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BGLBasisSetup.R
\name{BGLBasisSetup}
\alias{BGLBasisSetup}
\title{Basis Graphical Lasso Basis Setup}
\usage{
BGLBasisSetup(
  y,
  locs,
  basis = "LatticeKrig",
  Phi = NULL,
  crossvalidation = FALSE,
  distance.penalty = FALSE,
  ...
)
}
\arguments{
\item{y}{Real-valued data matrix of dimension (number of spatial locations) x (number of realizations); must have at least two realizations.}

\item{locs}{Matrix of real-valued spatial locations of data of dimension (number of spatial locations) x 2.}

\item{basis}{Character string for type of basis desired, currently only supports LatticeKrig-type basis.}

\item{Phi}{Basis matrix with rows indexing spatial locations and columns indexing basis functions. If not provided, then \eqn{Phi} is generated from the \code{basis} argument. If provided, this calculates the corresponding matrix products.}

\item{crossvalidation}{T/F depending upon whether cross validation is intended; slightly changes what is output.}

\item{distance.penalty}{T/F will return the locations of the basis centers of the LatticeKrig basis. Then, an example penalty matrix is \code{rdist(basiscenters)}.}

\item{...}{Other options relevant for basis specification such as NC and nlevel for LatticeKrig-type bases.}
}
\value{
A list of two matrices \eqn{\Phi'\Phi} and \eqn{\Phi'S\Phi}. Also returns the trace of the sample covariance (for nugget estimation). If cross validation is intended, \eqn{\Phi' Y} is returned instead of \eqn{\Phi' S \Phi}. If
}
\description{
Sets up basis quadratic forms used in the basis graphical lasso QUIC algorithm.
}
\details{
Sets up basis inner product matrices that are used in the basis graphical lasso QUIC algorithm.  The first is the inner product of basis matrices, \eqn{\Phi'\Phi}. Computed as \code{crossprod(Phi)}, where \code{Phi} has n rows corresponding to locations and l columns corresponding to the basis functions evaluated at those locations.  Second is inner product of the basis matrices and data, \eqn{\Phi'S\Phi} or \eqn{\Phi'Y} where Y is the data matrix with rows indexing spatial locations. This is where the data directly enters the algorithm. If cross validation is desired, only \eqn{\Phi'Y} is computed and subsequently appropriate columns are used in the cross validation scheme. If \code{distance.penalty=TRUE} then we return the basis centers of the LatticeKrig model for use in the penalty matrix.
}
\examples{
basis.setup <- BGLBasisSetup(y=tmin$data, locs=tmin$lon.lat.proj, nlevel=1, NC=20)
names(basis.setup)
}
