% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BGL_CV.R
\name{BGL_CV}
\alias{BGL_CV}
\title{Basis Graphical Lasso Cross Validation}
\usage{
BGL_CV(
  kfolds = 5,
  y,
  locs,
  lambdalist,
  zero.diagonal.penalty = TRUE,
  basis = "LatticeKrig",
  Phi = NULL,
  guess = NULL,
  outer_tol = NULL,
  MAX_ITER = NULL,
  MAX_RUNTIME_SECONDS = NULL,
  tau_sq = NULL,
  verbose = TRUE,
  distance.penalty = FALSE,
  final.guess = TRUE,
  ...
)
}
\arguments{
\item{kfolds}{Number of cross validation folds.}

\item{y}{Real-valued data matrix of dimension (number of spatial locations) x (number of realizations).}

\item{locs}{Matrix of real-valued spatial locations of data of dimension (number of spatial locations) x 2.}

\item{lambdalist}{Penalty parameter. Can be either a nonnegative real, or a matrix of nonnegative reals whose dimension is the same as the number of graph nodes.}

\item{zero.diagonal.penalty}{Boolean, if TRUE with a scalar penalty \code{lambda}, then diagonals of the precision matrix are not penalized. Default: TRUE.}

\item{basis}{Character string for type of basis desired, currently only supports LatticeKrig-type basis.}

\item{Phi}{Basis matrix, if not specified in \code{basis} option. Rows index location and columns index basis function, Default: NULL.}

\item{guess}{An initial guess at the precision matrix. Default of \code{guess} if not specified is the identity matrix.}

\item{outer_tol}{Tolerance. Default: see \code{BGL_DC}.}

\item{MAX_ITER}{Maximum number of iterations. Default: see \code{BGL_DC}.}

\item{MAX_RUNTIME_SECONDS}{Maximum runtime in seconds. Default: see \code{BGL_DC}.}

\item{tau_sq}{Nugget variance, estimated by \code{nugget_estimate} if not provided.}

\item{verbose}{Print algorithm details after each iteration. Default: TRUE.}

\item{distance.penalty}{If using LatticeKrig Wendland basis functions and a constant lambda, then multiply the distance matrix of the basis centers times lambda for the penalty matrix, Default: FALSE.}

\item{final.guess}{Return the final estimate with the best penalty parameter, Default: TRUE.}

\item{...}{Other options relevant for basis specification such as NC and nlevel for LatticeKrig-type bases.}
}
\value{
Precision matrix of the random coefficients in the weighted sum of basis functions.
}
\description{
Estimates the precision matrix from basis graphical lasso model
}
\details{
This is the algorithm suggested in the paper. It uses the \code{QUIC} algorithm to solve the penalized likelihood problem for each fold, training the model based on "training data" and evaluating fit based on the likelihood with the "testing data". Note that in the paper, the value \eqn{\lambda=7} is reported, which should be consistent with R < version 3.6. With the most recent R version 4.0, the seed is different and \eqn{\lambda=8} is selected.
}
\examples{
#the full search space considered, commented for runtime, will take very long
#CVguess <- BGL_CV(kfolds=2, y=tmin$data, locs=tmin$lon.lat.proj, lambdalist=1:30, basis="LatticeKrig",
    #outer_tol=0.05, MAX_ITER=50, MAX_RUNTIME_SECONDS=86400, NC=30, nlevel=1,distance.penalty=TRUE)
}
